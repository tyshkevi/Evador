#############################################################################
# Makefile for building: hw5
# Generated by qmake (2.01a) (Qt 4.6.2) on: Thu Apr 26 17:02:01 2012
# Project:  hw5.pro
# Template: app
# Command: /usr/bin/qmake -unix -o Makefile hw5.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I.
LINK          = g++
LFLAGS        = -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = ball.cpp \
		evador.cpp \
		follow.cpp \
		lifeMinus.cpp \
		lifeMinusMinus.cpp \
		lifePlus.cpp \
		lifePlusPlus.cpp \
		main.cpp \
		objects.cpp \
		paddle.cpp \
		pointsMinus.cpp \
		pointsMinusMinus.cpp \
		pointsPlus.cpp \
		pointsPlusPlus.cpp \
		shootSide.cpp \
		shootup.cpp \
		thing.cpp moc_evador.cpp
OBJECTS       = ball.o \
		evador.o \
		follow.o \
		lifeMinus.o \
		lifeMinusMinus.o \
		lifePlus.o \
		lifePlusPlus.o \
		main.o \
		objects.o \
		paddle.o \
		pointsMinus.o \
		pointsMinusMinus.o \
		pointsPlus.o \
		pointsPlusPlus.o \
		shootSide.o \
		shootup.o \
		thing.o \
		moc_evador.o
DIST          = /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		hw5.pro
QMAKE_TARGET  = hw5
DESTDIR       = 
TARGET        = hw5

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: hw5.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/libQtGui.prl \
		/usr/lib/libQtCore.prl
	$(QMAKE) -unix -o Makefile hw5.pro
/usr/share/qt4/mkspecs/common/g++.conf:
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/libQtGui.prl:
/usr/lib/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -unix -o Makefile hw5.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/hw51.0.0 || $(MKDIR) .tmp/hw51.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/hw51.0.0/ && $(COPY_FILE) --parents ball.h evador.h follow.h lifeMinus.h lifeMinusMinus.h lifePlus.h lifePlusPlus.h objects.h paddle.h pointsMinus.h pointsMinusMinus.h pointsPlus.h pointsPlusPlus.h shootSide.h shootup.h thing.h .tmp/hw51.0.0/ && $(COPY_FILE) --parents ball.cpp evador.cpp follow.cpp lifeMinus.cpp lifeMinusMinus.cpp lifePlus.cpp lifePlusPlus.cpp main.cpp objects.cpp paddle.cpp pointsMinus.cpp pointsMinusMinus.cpp pointsPlus.cpp pointsPlusPlus.cpp shootSide.cpp shootup.cpp thing.cpp .tmp/hw51.0.0/ && (cd `dirname .tmp/hw51.0.0` && $(TAR) hw51.0.0.tar hw51.0.0 && $(COMPRESS) hw51.0.0.tar) && $(MOVE) `dirname .tmp/hw51.0.0`/hw51.0.0.tar.gz . && $(DEL_FILE) -r .tmp/hw51.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_evador.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_evador.cpp
moc_evador.cpp: objects.h \
		paddle.h \
		ball.h \
		shootup.h \
		shootSide.h \
		follow.h \
		lifeMinus.h \
		thing.h \
		lifeMinusMinus.h \
		lifePlus.h \
		lifePlusPlus.h \
		pointsMinus.h \
		pointsMinusMinus.h \
		pointsPlus.h \
		pointsPlusPlus.h \
		evador.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) evador.h -o moc_evador.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

ball.o: ball.cpp ball.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ball.o ball.cpp

evador.o: evador.cpp evador.h \
		objects.h \
		paddle.h \
		ball.h \
		shootup.h \
		shootSide.h \
		follow.h \
		lifeMinus.h \
		thing.h \
		lifeMinusMinus.h \
		lifePlus.h \
		lifePlusPlus.h \
		pointsMinus.h \
		pointsMinusMinus.h \
		pointsPlus.h \
		pointsPlusPlus.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o evador.o evador.cpp

follow.o: follow.cpp follow.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o follow.o follow.cpp

lifeMinus.o: lifeMinus.cpp lifeMinus.h \
		thing.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o lifeMinus.o lifeMinus.cpp

lifeMinusMinus.o: lifeMinusMinus.cpp lifeMinusMinus.h \
		thing.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o lifeMinusMinus.o lifeMinusMinus.cpp

lifePlus.o: lifePlus.cpp lifePlus.h \
		thing.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o lifePlus.o lifePlus.cpp

lifePlusPlus.o: lifePlusPlus.cpp lifePlusPlus.h \
		thing.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o lifePlusPlus.o lifePlusPlus.cpp

main.o: main.cpp evador.h \
		objects.h \
		paddle.h \
		ball.h \
		shootup.h \
		shootSide.h \
		follow.h \
		lifeMinus.h \
		thing.h \
		lifeMinusMinus.h \
		lifePlus.h \
		lifePlusPlus.h \
		pointsMinus.h \
		pointsMinusMinus.h \
		pointsPlus.h \
		pointsPlusPlus.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

objects.o: objects.cpp objects.h \
		evador.h \
		paddle.h \
		ball.h \
		shootup.h \
		shootSide.h \
		follow.h \
		lifeMinus.h \
		thing.h \
		lifeMinusMinus.h \
		lifePlus.h \
		lifePlusPlus.h \
		pointsMinus.h \
		pointsMinusMinus.h \
		pointsPlus.h \
		pointsPlusPlus.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o objects.o objects.cpp

paddle.o: paddle.cpp paddle.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o paddle.o paddle.cpp

pointsMinus.o: pointsMinus.cpp pointsMinus.h \
		thing.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pointsMinus.o pointsMinus.cpp

pointsMinusMinus.o: pointsMinusMinus.cpp pointsMinusMinus.h \
		thing.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pointsMinusMinus.o pointsMinusMinus.cpp

pointsPlus.o: pointsPlus.cpp pointsPlus.h \
		thing.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pointsPlus.o pointsPlus.cpp

pointsPlusPlus.o: pointsPlusPlus.cpp pointsPlusPlus.h \
		thing.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pointsPlusPlus.o pointsPlusPlus.cpp

shootSide.o: shootSide.cpp shootSide.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o shootSide.o shootSide.cpp

shootup.o: shootup.cpp shootup.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o shootup.o shootup.cpp

thing.o: thing.cpp thing.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o thing.o thing.cpp

moc_evador.o: moc_evador.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_evador.o moc_evador.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

